// mainwindow.cc.
// created by tekky on 2021.2.20.
// Copyright Â© 2021 tekky. All rights reserved.

#include "qmonitor/mainwindow.hh"

#include <QGridLayout>
#include <QMessageBox>
#include <QProcess>
#include <QPushButton>
#include <QStatusBar>
#include <QTime>
#include <QTimer>

#include "qmonitor/authorinfo.hh"
#include "qmonitor/cpu.hh"
#include "qmonitor/memory.hh"
#include "qmonitor/process.hh"
#include "qmonitor/system.hh"
#include "qmonitor/utils.hpp"

#include "resources.h" // in CMAKE_BINARY_DIR, generated by cmake

MainWindow::MainWindow(QWidget *parent) : QWidget{parent} {
  auto layout = new QGridLayout(this);

  system_info_ = new SystemInfo(this);
  cpu_status_ = new CpuStatus(this, system_info_->processor_count());
  memory_status_ = new MemoryStatus(this);
  process_status_ = new ProcessStatus(this);

  tab_viewer_ = new QTabWidget();
  tab_viewer_->setTabShape(QTabWidget::Triangular);

  tab_viewer_->tabBar()->setExpanding(true);
  tab_viewer_->addTab(system_info_, tr("SystemInfo"));
  tab_viewer_->addTab(process_status_, tr("Process"));
  tab_viewer_->addTab(cpu_status_, tr("CPU"));
  tab_viewer_->addTab(memory_status_, tr("Memory"));
  tab_viewer_->addTab(new AuthorInfo(), tr("About"));

  layout->addWidget(tab_viewer_, 0, 0, 1, 2);

  auto reboot_button = new QPushButton("Reboot", this);
  layout->addWidget(reboot_button, 1, 0);
  connect(reboot_button, &QPushButton::clicked, this,
          &MainWindow::on_reboot_button_clicked);

  auto shutdown_button = new QPushButton("Shutdown", this);
  layout->addWidget(shutdown_button, 1, 1);
  connect(shutdown_button, &QPushButton::clicked, this,
          &MainWindow::on_shutdown_button_clicked);

  auto status_bar = new QStatusBar(this);
  layout->addWidget(status_bar, 2, 0, 2, 2);

  auto current_time = new QLabel("", this);
  status_bar->addWidget(current_time);

  auto cpu_status = new QLabel("", this);
  status_bar->addWidget(cpu_status);

  auto timer = new QTimer();
  connect(timer, &QTimer::timeout, this, [this, cpu_status, current_time]() {
    current_time->setText("Current Time: " + QTime::currentTime().toString());
    cpu_status->setText(
        "CPU Load: " +
        QString::number(cpu_status_->on_cpu_status_update() * 100) + "%");

    process_status_->on_data_updated();
    cpu_status_->on_cpu_status_update();
    memory_status_->on_data_updated();
  });
  timer->start(1000);
}

MainWindow::~MainWindow() {}

void MainWindow::on_reboot_button_clicked() {
  auto res = QMessageBox::warning(nullptr, "reboot", "Are you sure?",
                                  QMessageBox::Yes | QMessageBox::No);
  if (res == QMessageBox::Yes) {
    utils::exec("reboot");
  }
}

void MainWindow::on_shutdown_button_clicked() {
  auto res = QMessageBox::warning(nullptr, "shutdown", "Are you sure?",
                                  QMessageBox::Yes | QMessageBox::No);
  if (res == QMessageBox::Yes) {
    utils::exec("shutdown -t 0");
  }
}